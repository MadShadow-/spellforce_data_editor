//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SpellforceDataEditor.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SpellforceDataEditor.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap building_icon {
            get {
                object obj = ResourceManager.GetObject("building_icon", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap decoration_icon {
            get {
                object obj = ResourceManager.GetObject("decoration_icon", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap enemycamp_icon {
            get {
                object obj = ResourceManager.GetObject("enemycamp_icon", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap flag_icon {
            get {
                object obj = ResourceManager.GetObject("flag_icon", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 330 core
        ///
        ///in vec4 fragmentColor;
        ///in vec2 UV;
        ///
        ///out vec4 color;
        ///
        ///uniform sampler2D myTextureSampler;
        ///uniform bool texture_used;
        ///
        ///void main(){
        ///  vec4 temp_c = fragmentColor;
        ///  if(texture_used)
        ///    temp_c *= texture(myTextureSampler, UV);
        ///  if (temp_c.a == 0.0)
        ///    discard;
        ///  color = temp_c * fragmentColor;
        ///}.
        /// </summary>
        internal static string fshader {
            get {
                return ResourceManager.GetString("fshader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 330 core
        ///
        ///in vec4 fragmentColor;
        ///in vec2 UV;
        ///flat in vec3 textureID;
        ///in vec3 textureWeight;
        ///
        ///out vec4 color;
        ///
        ///uniform sampler2DArray myTextureSampler;
        ///uniform bool texture_used;
        ///
        ///void main(){
        ///  vec4 temp_c = fragmentColor;
        ///  if(texture_used)
        ///  {
        ///    vec4 col1 = texture(myTextureSampler, vec3(UV, textureID.x));
        ///    vec4 col2 = texture(myTextureSampler, vec3(UV, textureID.y));
        ///    vec4 col3 = texture(myTextureSampler, vec3(UV, textureID.z));
        ///    temp_c = col1*textureWeight.x + col2 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string fshader_hmap {
            get {
                return ResourceManager.GetString("fshader_hmap", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 330 core
        ///
        ///in vec2 UV;
        ///
        ///out vec4 color;
        ///
        ///uniform sampler2D myTextureSampler;
        ///
        ///void main(){
        ///  vec4 temp_c = texture(myTextureSampler, UV);
        ///  if (temp_c.a == 0.0)
        ///    discard;
        ///  color = temp_c;
        ///}.
        /// </summary>
        internal static string fshader_skel {
            get {
                return ResourceManager.GetString("fshader_skel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap hmap_icon {
            get {
                object obj = ResourceManager.GetObject("hmap_icon", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap lake_icon {
            get {
                object obj = ResourceManager.GetObject("lake_icon", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap metadata_icon {
            get {
                object obj = ResourceManager.GetObject("metadata_icon", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap npc_icon {
            get {
                object obj = ResourceManager.GetObject("npc_icon", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap object_icon {
            get {
                object obj = ResourceManager.GetObject("object_icon", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap texture_icon {
            get {
                object obj = ResourceManager.GetObject("texture_icon", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap unit_icon {
            get {
                object obj = ResourceManager.GetObject("unit_icon", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 330 core
        ///
        ///// Input vertex data, different for all executions of this shader.
        ///layout(location = 0) in vec3 vertexPosition_modelspace;
        ///layout(location = 1) in vec4 vertexColor;
        ///layout(location = 2) in vec2 vertexUV;
        ///
        ///out vec4 fragmentColor;
        ///out vec2 UV;
        ///
        ///// Values that stay constant for the whole mesh.
        ///uniform mat4 MVP;
        ///  
        ///void main(){
        ///  // Output position of the vertex, in clip space : MVP * position
        ///  gl_Position = MVP * vec4(vertexPosition_modelspace,1);
        ///  UV = vertexUV;
        ///  fragmen [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string vshader {
            get {
                return ResourceManager.GetString("vshader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 330 core
        ///
        ///// Input vertex data, different for all executions of this shader.
        ///layout(location = 0) in vec3 vertexPosition_modelspace;
        ///layout(location = 1) in vec4 vertexColor;
        ///layout(location = 2) in vec2 vertexUV;
        ///layout(location = 3) in vec3 texID;
        ///layout(location = 4) in vec3 texWeight;
        ///
        ///out vec4 fragmentColor;
        ///out vec2 UV;
        ///flat out vec3 textureID;
        ///out vec3 textureWeight;
        ///
        ///// Values that stay constant for the whole mesh.
        ///uniform mat4 MVP;
        ///  
        ///void main(){
        ///  // Output position of  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string vshader_hmap {
            get {
                return ResourceManager.GetString("vshader_hmap", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 330 core
        ///
        ///// Input vertex data, different for all executions of this shader.
        ///layout(location = 0) in vec3 vertexPosition_modelspace;
        ///layout(location = 1) in vec2 vertexUV;
        ///layout(location = 2) in vec4 vertexBoneIndex;
        ///layout(location = 3) in vec4 vertexBoneWeight;
        ///
        ///out vec2 UV;
        ///
        ///// Values that stay constant for the whole mesh.
        ///uniform mat4 MVP;
        ///uniform mat4 boneTransforms[20];
        ///  
        ///void main(){
        ///  vec4 Vertex;
        ///  vec4 newVertex;
        ///  int index;
        ///
        ///  Vertex = vec4(vertexPosition_modelspace [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string vshader_skel {
            get {
                return ResourceManager.GetString("vshader_skel", resourceCulture);
            }
        }
    }
}
